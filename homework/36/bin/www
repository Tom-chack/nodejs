#!/usr/bin/env node

/**
 * Module dependencies.
 */

const {app, server} = require('../app');
const debug = require('debug')('lesson-11:server');

// DB Connection //////////////////////////////////////
const mongoose = require('mongoose');
require(`dotenv`).config();

let DB_LINK = '';
let PORT = ''; 

if( process.env.NODE_ENV == 'production' ){
    PORT = process.env.PORT_PROD;
    DB_LINK = process.env.DB_STRING_PROD;
} else {
    PORT = process.env.PORT_DEV;
    DB_LINK = process.env.DB_STRING_DEV;
}

mongoose.connect( DB_LINK, { useNewUrlParser:true, useUnifiedTopology:true, useCreateIndex: true}, (err)=>{
    
    if(err) throw err;
    console.log(`Database connected, ENV: `, process.env.NODE_ENV, ' | PORT: ' + PORT);

    app.set('port', PORT);
    server.listen(PORT);
    server.on('error', onError);
    server.on('listening', onListening);
    
});




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
